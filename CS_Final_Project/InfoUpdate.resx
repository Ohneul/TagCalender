<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ARgAAAAASUVORK5CYII=
</value>
  </data>
</root>